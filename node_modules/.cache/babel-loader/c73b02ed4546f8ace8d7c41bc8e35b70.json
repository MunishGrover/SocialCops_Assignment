{"ast":null,"code":"import _classCallCheck from \"/home/munishgrover/sachin_dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/munishgrover/sachin_dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/munishgrover/sachin_dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/munishgrover/sachin_dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/munishgrover/sachin_dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/munishgrover/sachin_dashboard/src/components/Chart.js\";\nimport React, { Component } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\nimport * as d3 from 'd3';\nimport data from '../dataset/sachin.csv';\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentComponent = this;\n      d3.csv(data).then(function (data) {\n        var colbatt = data.map(function (d) {\n          return {\n            col0: d.batting_score[0]\n          };\n        });\n        var testArray = Object.entries(colbatt).slice(0, 200).map(function (entry) {\n          return entry[1].col0;\n        });\n        console.log(testArray);\n\n        var average = function average(list) {\n          return list.reduce(function (prev, curr) {\n            return prev + curr;\n          }) / list.length;\n        };\n\n        var list = [0, 10, 20, 30];\n        average(list);\n        currentComponent.setState({\n          data: {\n            labels: Array(200).fill(2),\n            datasets: [{\n              data: list,\n              backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 99, 132, 0.6)']\n            }]\n          }\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        className: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Line, {\n        data: data,\n        width: 50,\n        height: 500,\n        options: {\n          maintainAspectRatio: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default Chart;","map":{"version":3,"sources":["/home/munishgrover/sachin_dashboard/src/components/Chart.js"],"names":["React","Component","Bar","Line","Pie","d3","data","Chart","props","state","currentComponent","csv","then","colbatt","map","d","col0","batting_score","testArray","Object","entries","slice","entry","console","log","average","list","reduce","prev","curr","length","setState","labels","Array","fill","datasets","backgroundColor","catch","err","maintainAspectRatio"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,QAA6B,iBAA7B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;IAKMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAW,EAAX;AAFe;AAGlB;;;;wCAEmB;AAChB,UAAIC,gBAAgB,GAAG,IAAvB;AACAL,MAAAA,EAAE,CAACM,GAAH,CAAOL,IAAP,EAAaM,IAAb,CAAkB,UAASN,IAAT,EAAe;AAC7B,YAAIO,OAAO,GAAGP,IAAI,CAACQ,GAAL,CAAS,UAASC,CAAT,EAAY;AAC/B,iBAAO;AACHC,YAAAA,IAAI,EAAED,CAAC,CAACE,aAAF,CAAgB,CAAhB;AADH,WAAP;AAGH,SAJa,CAAd;AAKZ,YAAIC,SAAS,GAACC,MAAM,CAACC,OAAP,CAAeP,OAAf,EAAwBQ,KAAxB,CAA8B,CAA9B,EAAgC,GAAhC,EAAqCP,GAArC,CAAyC,UAAAQ,KAAK;AAAA,iBAAIA,KAAK,CAAC,CAAD,CAAL,CAASN,IAAb;AAAA,SAA9C,CAAd;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;;AACY,YAAMO,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACC,MAAL,CAAY,UAACC,IAAD,EAAOC,IAAP;AAAA,mBAAgBD,IAAI,GAAGC,IAAvB;AAAA,WAAZ,IAA2CH,IAAI,CAACI,MAApD;AAAA,SAApB;;AAEA,YAAMJ,IAAI,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,CAAb;AACAD,QAAAA,OAAO,CAACC,IAAD,CAAP;AACAhB,QAAAA,gBAAgB,CAACqB,QAAjB,CAA0B;AAACzB,UAAAA,IAAI,EAAC;AACxB0B,YAAAA,MAAM,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,CAAhB,CADgB;AAExBC,YAAAA,QAAQ,EAAC,CACL;AACI7B,cAAAA,IAAI,EAACoB,IADT;AAEIU,cAAAA,eAAe,EAAC,CACZ,yBADY,EAEZ,yBAFY,EAGZ,yBAHY,EAIZ,yBAJY,EAKZ,0BALY,EAMZ,yBANY,EAOZ,yBAPY;AAFpB,aADK;AAFe;AAAN,SAA1B;AAmBH,OA/BD,EA+BGC,KA/BH,CA+BS,UAASC,GAAT,EAAc;AACnBf,QAAAA,OAAO,CAACC,GAAR,CAAYc,GAAZ;AACH,OAjCD;AAkCH;;;6BAKQ;AAAA,UACEhC,IADF,GACQ,KAAKG,KADb,CACEH,IADF;AAGL,aACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AACI,QAAA,IAAI,EAAEA,IADV;AAEI,QAAA,KAAK,EAAE,EAFX;AAGI,QAAA,MAAM,EAAE,GAHZ;AAII,QAAA,OAAO,EAAE;AAAEiC,UAAAA,mBAAmB,EAAE;AAAvB,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAUH;;;;EA5DetC,S;;AA8DpB,eAAgBM,KAAhB","sourcesContent":["import React,{Component} from 'react';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\nimport * as d3 from 'd3';\nimport data from '../dataset/sachin.csv';\n\n\n\n\nclass Chart extends Component{\n    constructor(props) {\n        super(props)\n        this.state={};\n    }\n\n    componentDidMount() {\n        let currentComponent = this;\n        d3.csv(data).then(function(data) {\n            var colbatt = data.map(function(d) {\n                return {\n                    col0: d.batting_score[0]\n                }\n            });\nvar testArray=Object.entries(colbatt).slice(0,200).map(entry => entry[1].col0);\nconsole.log(testArray)\n            const average = list => list.reduce((prev, curr) => prev + curr) / list.length;\n\n            const list = [0, 10, 20, 30]\n            average(list)\n            currentComponent.setState({data:{\n                    labels: Array(200).fill(2),\n                    datasets:[\n                        {\n                            data:list,\n                            backgroundColor:[\n                                'rgba(255, 99, 132, 0.6)',\n                                'rgba(54, 162, 235, 0.6)',\n                                'rgba(255, 206, 86, 0.6)',\n                                'rgba(75, 192, 192, 0.6)',\n                                'rgba(153, 102, 255, 0.6)',\n                                'rgba(255, 159, 64, 0.6)',\n                                'rgba(255, 99, 132, 0.6)'\n                            ]\n                        }\n                    ]\n\n\n                }})\n        }).catch(function(err) {\n            console.log(err)\n        })\n    }\n\n\n\n\n    render() {\n        const {data}=this.state;\n\n        return (\n            <div className=\"chart\">\n                <Line\n                    data={data}\n                    width={50}\n                    height={500}\n                    options={{ maintainAspectRatio: false }}\n                />\n            </div>\n        );\n    }\n}\nexport default  Chart;"]},"metadata":{},"sourceType":"module"}